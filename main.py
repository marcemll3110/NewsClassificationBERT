from bert_regression import BERTModel
import torch
import os
import datetime
from scraping_functions import scrape_and_save
from helper_functions import save_df_as_xlsx



websites = ["https://www.hydrogenfuelnews.com",
        #"https://h2lac.org/noticias",
        #"https://www.globalhydrogenreview.com",
        #"https://www.elpais.com.uy/sostenible",
        #"https://bioenergytimes.com/",
        #"https://www.hydrogeninsight.com/latest",
        "https://www.energiaestrategica.com/"]

folder_path = os.path.dirname(__file__)
print(folder_path)
dataframe_folder_path = os.path.join(folder_path,"news_dataframes")
news_folder_path = os.path.join(folder_path,"news")



if __name__ == "__main__":
    
    news_dataframe = scrape_and_save(websites,news_folder_path, max_amount_of_news=2, keywords=["hydrogen"])
    
    
    root = os.getcwd()
    print(root)
    
    
    
    filtered_excel_path = os.path.join(root, "news", "2025-02-11_filtered_news.xlsx")
    excel_path = os.path.join(root, "news", f"{datetime.datetime.today().strftime('%Y-%m-%d')}_news.xlsx")
    filtered_excel_path = os.path.join(root, "news", f"{datetime.datetime.today().strftime('%Y-%m-%d')}_filtered_news.xlsx")

    model_path = os.path.join(root, "models")
    checkpoint_path = os.path.join(root, "models", "best_model.pt")

    
    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
    b = BERTModel(name="V1",device=device)
    
    
    

    dataset_path = os.path.join(root, "dataset","dataset_complete.pkl")
    #b.load_checkpoint(checkpoint_path)
    b.train_regression_model(dataset_path,checkpoint_dir=model_path,num_epochs=25)
    
    #b.model.eval()



    pred_text = list(news_dataframe["text"])
    predictions = b.predict_message(pred_text)
    
    predictions = predictions.detach().cpu().numpy()


    # We add a new column with the ratings generated by the ANN
    news_dataframe["ratings"] = predictions
    print(news_dataframe)
    
    # filter the news by rating
    filtered_news = news_dataframe[news_dataframe["ratings"] > 0.5]
    save_df_as_xlsx(news_dataframe,excel_path) # rewrite the excel file with the ratings
    save_df_as_xlsx(filtered_news,filtered_excel_path) # save the filtered news
    


